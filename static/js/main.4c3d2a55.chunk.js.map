{"version":3,"sources":["components/card/card.comp.jsx","components/card-list/card-list.comp.jsx","components/search-box/search.comp.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","member","username","src","imgs","key","mID","name","email","CardList","members","map","inc","id","imgsrcs","parseInt","Search","placeholder","searchAction","type","onChange","App","state","sources","searchVal","fetch","then","response","json","setState","this","searchFilter","filter","toLowerCase","includes","e","target","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAEaA,EAAO,SAAAC,GACnB,OAAQ,yBAAKC,UAAU,QACpB,yBAAKC,IAAKF,EAAMG,OAAOC,SAAUC,IAAKL,EAAMM,OAC5C,wBAAIC,IAAKP,EAAMQ,KAAMR,EAAMG,OAAOM,KAAlC,KAA0CT,EAAMG,OAAOC,SAAvD,KACA,2BAAG,0BAAMG,IAAKP,EAAMQ,KAAMR,EAAMG,OAAOO,UCF9BC,G,MAAW,SAAAX,GACvB,OAAQ,yBAAKC,UAAU,aACnBD,EAAMY,QAAQC,KAAI,SAACV,EAAQW,GAAT,OAClB,kBAAC,EAAD,CAAMN,IAAKL,EAAOY,GAAIZ,OAAQA,EAAQG,KAAMN,EAAMgB,QAAQC,SAASd,EAAOY,IAAI,WCLtEG,EAAS,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OAAQ,2BACPL,GAAG,cACHM,KAAK,SACLF,YAAaA,EACbG,SAAUF,KCsCGG,G,kBAvCd,aAAc,IAAD,8BACZ,+CACKC,MAAQ,CACZZ,QAAS,GACTa,QAAS,CACR,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,sBACA,wBAEDC,UAAW,IAhBA,E,iFAoBO,IAAD,OAClBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAzB,GAAM,OAAI,EAAK4B,SAAS,CAACnB,QAAQT,S,+BAG/B,IAAD,SACgC6B,KAAKR,MAApCZ,EADD,EACCA,QAASa,EADV,EACUA,QAASC,EADnB,EACmBA,UACpBO,EAAerB,EAAQsB,QAAO,SAAA/B,GAAM,OAAIA,EAAOM,KAAK0B,cAAcC,SAASV,EAAUS,kBAC3F,OACC,yBAAKlC,UAAU,OACd,yCACA,kBAAC,EAAD,CAAQkB,YAAY,sBAAsBC,aAAc,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACL,UAAWW,EAAEC,OAAOC,WAChG,kBAAC,EAAD,CAAU3B,QAASqB,EAAcjB,QAASS,S,GAlC5Be,IAAMC,YCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,MAAK,SAAA0B,GACjCA,EAAaC,kB","file":"static/js/main.4c3d2a55.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport const Card = props => {\r\n\treturn\t(<div className=\"card\">\r\n\t\t\t\t<img alt={props.member.username} src={props.imgs} />\r\n\t\t\t\t<h2 key={props.mID}>{props.member.name} ({props.member.username})</h2>\r\n\t\t\t\t<i><span key={props.mID}>{props.member.email}</span></i>\r\n\t\t\t</div>);\r\n};","import React from 'react';\r\nimport {Card} from '../card/card.comp';\r\nimport './card-list.comp.css';\r\n\r\nexport const CardList = props => {\r\n\treturn (<div className=\"card-list\">\r\n\t\t\t\t{props.members.map((member, inc) => (\r\n\t\t\t\t\t<Card mID={member.id} member={member} imgs={props.imgsrcs[parseInt(member.id)-1]}/>\r\n\t\t\t\t))} \r\n\t\t\t</div>);\r\n};","import React from 'react';\r\n\r\nexport const Search = ({placeholder, searchAction}) => {\r\n\treturn (<input \r\n\t\tid=\"searchField\" \r\n\t\ttype=\"search\" \r\n\t\tplaceholder={placeholder} \r\n\t\tonChange={searchAction}\r\n\t/>);\r\n};","import React  from 'react';\r\nimport {CardList} from './components/card-list/card-list.comp';\r\nimport {Search} from './components/search-box/search.comp';\r\nimport './App.css';\r\n\r\nclass App extends React.Component{\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tmembers: [],\r\n\t\t\tsources: [\r\n\t\t\t\t'profile-icon/p1.png',\r\n\t\t\t\t'profile-icon/p2.png',\r\n\t\t\t\t'profile-icon/p3.png',\r\n\t\t\t\t'profile-icon/p4.png',\r\n\t\t\t\t'profile-icon/p5.png',\r\n\t\t\t\t'profile-icon/p6.png',\r\n\t\t\t\t'profile-icon/p7.png',\r\n\t\t\t\t'profile-icon/p8.png',\r\n\t\t\t\t'profile-icon/p9.png',\r\n\t\t\t\t'profile-icon/p10.png'\r\n\t\t\t],\r\n\t\t\tsearchVal: \"\"\r\n\t\t};\r\n\t}\r\n\t\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(member => this.setState({members:member}));\r\n\t}\r\n\t\r\n\trender(){\r\n\t\tconst { members, sources, searchVal} = this.state;\r\n\t\tconst searchFilter = members.filter(member => member.name.toLowerCase().includes(searchVal.toLowerCase()));\r\n\t\treturn (\r\n\t\t\t<div className=\"app\">\r\n\t\t\t\t<h1>Our Staff</h1>\r\n\t\t\t\t<Search placeholder=\"Search for a Member\" searchAction={e => this.setState({searchVal: e.target.value})}/>\r\n\t\t\t\t<CardList members={searchFilter} imgsrcs={sources}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}